<template lang="pug">
.word-box
  .word
    //- 左侧数据集选择
    //- .db-left-bar
    //-   .db-item
    //-     .icon &#xe61b;
    //-     span 关键词数据库
    .cent-bar
      .type-bar
        .labe 关键词分类：
        .type-item.Polity.active(o-tap="getData('Polity')") 关键词
        .type-item.Standard(o-tap="getData('Standard')") 错误表述
        .type-item.XiYu(o-tap="getData('XiYu')") 习语/重要句子
        //- .type-item.regular(o-tap="getData('regular')") 规则匹配
        //- .type-item.Porn(o-tap="getData('Porn')") 色情
        //- .type-item.Abuse(o-tap="getData('Abuse')") 粗俗
        //- .type-item.Terror(o-tap="getData('Terror')") 恐怖
        //- .type-item.Ad(o-tap="getData('Ad')") 广告
      .table-box
      .pagination-box
    .right-bar
      .word-edit-box
        .word-edit-item
          .title 关键词类型
          .title-info 提示：请选择关键词对应的类型，分类错误会造成识别不到或识别错误。
          select(o-change="typeChange")
            option(value ="Polity") 关键词
            option(value ="Standard") 错误表述
            option(value ="XiYu") 习语/重要句子
            //- option(value ="regular") 规则匹配
            //- option(value ="Porn") 色情
            //- option(value ="Abuse") 粗俗
            //- option(value ="Terror") 恐怖
            //- option(value ="Ad") 广告
        .word-edit-item
          .title 关键词
          .title-info 提示：关键词输入框<span class="red">只能添加正确的关键词</span>，程序会自动生成各类错误情况，如有错误情况识别不出来可联系电话:3671或QQ:100284685修正
          input(type="text" o-value="this.data.edit.text")
        .word-edit-item(o-if="this.data.edit.type == 'Standard' || this.data.edit.type == 'regular'")
          .title 对应的正确表述
          .title-info 提示：这里填写关键词的正确表述，例如关键词输入框里填入“武汉肺炎”这里填入“新型冠状病毒肺炎”会在文本检测到“武汉肺炎”相关文字时提示错误表述并可一键替换为“新型冠状病毒肺炎”。
          input(type="text" o-value="this.data.edit.relation")
        .word-edit-item(o-if="this.data.edit.type != 'XiYu'")
          .title 重要性
          .title-info 提示：重要性选择会影响词语的识别力度，标记为普通的词语如果不是勾选严格模式会智能忽略掉相似度低的匹配以减少误报率，过多的使用重要标识会提高误报率，建议只对重点关键词使用。
          select(o-value="this.data.edit.major")
            option(value ="0") 一般
            option(value ="1") 重要
        .word-edit-item
          .title 提示信息
          .title-info 提示：提示信息是选填项，填写后在点击这个关键词时将会显示预先写好的关键信息，支持显示图片，文字，视频等内容。
          textarea(o-value="this.data.edit.tips")
        .button(o-tap="addWord") 添加关键词
</template>

<script>
  module.exports = {
    data: {
      get18n: {
        id: '编号',
        major: '重要标识',
        relation: '对应文字',
        text: '关键词',
        tips: '提示信息',
        type: '性质',
      },
      activeTableName: '',
      edit: {
        text: '',
        type: 'Polity',
        major: "0",
        tips: '',
        relation: ''
      },
      selectType: 'Polity'
    },
    created: function () {
      this.getData(this.data.selectType, 'word')
    },
    typeChange: function (value) {
      console.log(this.$target.value)
      this.data.edit.type = this.$target.value
      setTimeout(() => {
        this.handleEvent(this, this.query('.right-bar'))
      }, 100);
    },
    getData: function (type, name) {
      if (!name) name = this.data.activeTableName
      else this.data.activeTableName = name
      
      this.queryAll('.type-bar .type-item').forEach(element => {
        element.classList.remove('active')
      });
      this.query(`.type-bar .${type}`).classList.add('active')
      this.data.selectType = type
      const get18n = this.data.get18n
      fetch(serverIP + `getData?name=${name}&type=${type}`, {
        method: 'GET',
        redirect: 'follow'
      }).then(response => response.json()).then(result => {
          // console.log(result)
          if (result.err == 0) {
            // 取出列
            let newHTML = `<table><thead><tr>`
            let keyList = []
            for (const key in result.data[0]) {
              if (result.data[0].hasOwnProperty(key) && get18n[key]) {

                keyList.push(key)
                newHTML += `<th>${get18n[key]}</th>`
              }
            }
            // 添加工具条
            keyList.push('操作')
            newHTML += `<th>操作</th>`
            newHTML += `</tr></thead><tbody>`
            result.data.forEach(element => {
              newHTML += `<tr>`
              keyList.forEach(key => {
                // 如果是type需要做特殊处理
                if (key == 'type') {
                  newHTML += `<td>${getErrorTypeText(element[key])}</td>`
                } else if (key == '操作') {
                  newHTML += `<td><span o-tap="delete(${element['id']}, '${element['text']}')">删除</span></td>`
                } else if (key == 'major') {
                  newHTML += `<td>${element[key] ? '重要' : '一般'}</td>`
                } else {
                  if (element[key] == null) element[key] = ''
                  newHTML += `<td>${element[key]}</td>`
                }
                
              })
              newHTML += `</tr>`
            });
            newHTML += `</tbody></table>`
            // console.log(newHTML)
            this.query('.table-box').innerHTML = newHTML
            setTimeout(() => {
              this.handleEvent(this, this.query('.info-right'))
            }, 500);
          }
      }).catch(error => console.log('error', error));
    },
    delete: function (id, name) {
      if (confirm(`确定删除关键词“${name}”吗？`)) {
        fetch(serverIP + `delete?name=${this.data.activeTableName}&id=${id}`, {
          method: 'GET'
        }).then(response => response.json()).then(result => {
          if (result.err == 0) {
            alert(`关键词 [${name}] 已经被删除!`)
            this.getData(this.data.selectType)
            
          }
        }).catch(error => console.log('error', error));
      }
    },
    addWord: function () {
      console.log('去除前后空格')
      this.data.edit.text = this.data.edit.text.trim()
      if (!this.data.edit.text) {
        owo.tool.remind('关键词不能为空!', 2000)
        return
      }
      if (this.data.edit.type == 'Standard' && !this.data.edit.relation) {
        owo.tool.remind('关联词不能为空!', 2000)
        return
      }
      if (this.data.edit.type == 'XiYu' && this.data.edit.text.length < 8) {
        alert('小于8个字的习语请添加至政治分类!')
        return
      }
      fetch(serverIP + `addWord`, {
        method: 'POST',
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(this.data.edit),
      }).then(response => response.json()).then(result => {
        console.log(result)
        if (result.err !== 0) {
          alert(result.message)
        } else {
          owo.tool.remind('关键词添加成功!', 2000)
          this.data.edit = {
            text: '',
            type: this.data.edit.type,
            major: "0",
            tips: this.data.edit.tips,
            relation: ''
          }
          this.handleEvent(this, this.query('.info-right'))
        }
      }).catch(error => console.log('error', error));
    }
  }
</script>

<style lang="less">
.word-box {
  height: 100%;
}
.db-left-bar {
  width: 200px;
  background-color: #efd9d9;
  height: 100%;
  .db-item {
    display: flex;
    line-height: 40px;
    padding: 0 10px;
    font-size: 16px;
    border-bottom: 1px solid #ccc;
    .icon {
      width: 45px;
      text-align: center;
      font-size: 24px;
      color: #333;
    }
  }
}
.word {
  display: flex;
  height: 100%;
}
.right-bar {
  width: 250px;
  height: 100%;
  overflow: auto;
  background-color: whitesmoke;
  border-left: 1px solid #ccc;
  input[type="text"], select {
    height: 35px;
    width: 100%;
    border: 1px solid #ccc;
    outline: none;
    border-left: none;
    border-right: none;
    box-sizing: border-box;
    font-size: 16px;
  }
  textarea {
    border: 1px solid #ccc;
    border-left: none;
    border-right: none;
    outline: none;
    font-size: 16px;
  }
}
.cent-bar {
  width: calc(100% - 251px);
  .table-box {
    width: 100%;
    height: calc(100% - 70px);
    overflow: auto;
  }
  .pagination-box {
    height: 30px;
    background-color: lavenderblush;
  }
}
th {
  line-height: 22px;
}
td span {
  margin: 0 5px;
  background-color: #009fe9;
  color: white;
  padding: 3px 5px;
  border-radius: 3px;
  cursor: pointer;
}
textarea {
  width: 100%;
  height: 200px;
  display: block;
  background-color: azure;
}
.button {
  background-color: #009fe9;
  color: white;
  text-align: center;
  line-height: 40px;
  margin: 10px;
  border-radius: 3px;
  font-size: 16px;
  box-shadow: 1px 1px 3px #9c7f7f;
  cursor: pointer;
}
.title {
  line-height: 35px;
  font-size: 16px;
  padding: 0 5px;
  color: #333;
}
.title-info {
  font-size: 14px;
  color: #999;
  line-height: 24px;
  padding: 0 5px;
}
.type-bar {
  display: flex;
  height: 40px;
  line-height: 40px;
  border-bottom: 1px solid #ccc;
  box-sizing: border-box;
  padding: 0 10px;
  .type-item {
    text-align: center;
    background-color: gainsboro;
    height: 30px;
    line-height: 30px;
    margin: 5px;
    border-radius: 5px;
    padding: 0 15px;
    font-size: 14px;
    cursor: pointer;
  }
  .active {
    background-color: burlywood;
    color: white;
  }
}
table {
  width: 100%;
}
.red {
  color: red;
}
</style>